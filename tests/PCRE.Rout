
Rho Under development (unstable) (2020-03-26 ra04ed1cd38) -- "R(C) -> Rho(C++)"
Rho Copyright (C) 2008-2014 Andrew R. Runnalls

R Under development (unstable) (2017-02-17 r72200) -- "Frisbee Sailing"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

Rho is not part of the R project, so please do not report bugs
via r-bugs or the R website - instead refer to the author.

R jest oprogramowaniem darmowym i dostarczany jest BEZ JAKIEJKOLWIEK GWARANCJI.
Możesz go rozpowszechniać pod pewnymi warunkami.
Wpisz 'license()' lub 'licence()' aby uzyskać szczegóły dystrybucji.

R jest projektem kolaboracyjnym z wieloma uczestnikami.
Wpisz 'contributors()' aby uzyskać więcej informacji oraz
'citation()' aby dowiedzieć się jak cytować R lub pakiety R w publikacjach.

Wpisz 'demo()' aby zobaczyć demo, 'help()' aby uzyskać pomoc on-line, lub
'help.start()' aby uzyskać pomoc w przeglądarce HTML.
Wpisz 'q()' aby wyjść z R.

> .ptime <- proc.time()
> 
> ### tests of recursion in PCRE matching
> ### Based on PR16757
> 
> ## This is expected to throw a warning at some point if PCRE uses a stack,
> ## depending on the system and stack size.
> ## Typical stack 8-10M, some people use 40M.
> 
> pcre_config()["stack"]
stack 
 TRUE 
> 
> op <- options(warn = 1)
> for (n in c(seq(5000L, 10000L, 1000L), 20000L, 50000L, 100000L)) {
+     print(n)
+     x <- paste0(rep("a", n), collapse="")
+     print(grepl("(a|b)+", x, perl = TRUE))
+ }
[1] 5000
[1] TRUE
[1] 6000
[1] TRUE
[1] 7000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 8000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 9000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 10000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 20000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 50000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
[1] 100000
Ostrzeżenie w poleceniu 'grepl("(a|b)+", x, perl = TRUE)':
  recursion limit reached in PCRE for element 1
  consider increasing the C stack size for the R process
[1] FALSE
> options(op)
> 
> 
> ### tests of PCRE's JIT.
> if(!pcre_config()["JIT"]) {
+     message("These tests are pointless without JIT support")
+     q("no")
+ }
> 
> 
> ## Test from example(grep)
> 
> txt2 <- c("The", "licenses", "for", "most", "software", "are",
+           "designed", "to", "take", "away", "your", "freedom",
+           "to", "share", "and", "change", "it.",
+           "", "By", "contrast,", "the", "GNU", "General", "Public", "License",
+           "is", "intended", "to", "guarantee", "your", "freedom", "to",
+           "share", "and", "change", "free", "software", "--",
+           "to", "make", "sure", "the", "software", "is",
+           "free", "for", "all", "its", "users")
> grep("[gu]", txt2, perl = TRUE)
[1]  7 11 16 24 29 30 35 41 49
> 
> st <- function(expr) sum(system.time(expr)[1:2])
> 
> ## here JIT is slightly slower
> options(PCRE_study = FALSE)
> st(for(i in 1:1e4) grep("[gu]", txt2, perl = TRUE))
[1] 0.162
> options(PCRE_study = TRUE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e4) grep("[gu]", txt2, perl = TRUE))
[1] 0.111
> options(PCRE_study = TRUE, PCRE_use_JIT = TRUE)
> st(for(i in 1:1e4) grep("[gu]", txt2, perl = TRUE))
[1] 0.154
> 
> 
> ## and for more inputs, study starts to pay off
> txt3 <- rep(txt2, 10)
> options(PCRE_study = FALSE)
> st(for(i in 1:1e3) grep("[gu]", txt3, perl = TRUE))
[1] 0.089
> options(PCRE_study = TRUE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e3) grep("[gu]", txt3, perl = TRUE))
[1] 0.04
> options(PCRE_study = TRUE, PCRE_use_JIT = TRUE)
> st(for(i in 1:1e3) grep("[gu]", txt3, perl = TRUE))
[1] 0.036
> 
> 
> ## An example where JIT really pays off (e.g. 10x)
> pat <- "([^[:alpha:]]|a|b)+"
> long_string <- paste0(rep("a", 1023), collapse="")
> N <- 10
> options(PCRE_study = FALSE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e3) grep(pat, rep(long_string, N), perl = TRUE))
[1] 0.601
> options(PCRE_study = TRUE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e3) grep(pat, rep(long_string, N), perl = TRUE))
[1] 0.602
> options(PCRE_study = TRUE, PCRE_use_JIT = TRUE)
> st(for(i in 1:1e3) grep(pat, rep(long_string, N), perl = TRUE))
[1] 0.058
> 
> 
> ## This needs to test 50 strings to see much gain from study
> txt <- rep("a test of capitalizing", 50)
> options(PCRE_study = FALSE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e4) gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl = TRUE))
[1] 0.626
> options(PCRE_study = TRUE, PCRE_use_JIT = FALSE)
> st(for(i in 1:1e4) gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl = TRUE))
[1] 0.526
> options(PCRE_study = TRUE, PCRE_use_JIT = TRUE)
> st(for(i in 1:1e4) gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl = TRUE))
[1] 0.434
> 
> cat("Time elapsed: ", proc.time() - .ptime,"\n")
Time elapsed:  3.598 0.005 3.601 0 0 
> 
