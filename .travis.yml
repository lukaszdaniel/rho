sudo: required
dist: bionic
language: cpp
env:
  global:
    # By default, rho uses its own implementation of tar written in R.
    # It's really slow, so use system tar instead.
    - TAR=/bin/tar
    - R_BUILD_TAR=/bin/tar
    - R_INSTALL_TAR=/bin/tar
    # Use catchsegv to get useful stacktraces on failures.
    - RHO_DEBUGGER=catchsegv
    
matrix:
  include:
    # g++ with code coverage.
    - compiler: g++
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gfortran
            - automake
            - perl
            - libboost-all-dev
            - zlib1g-dev
            - libbz2-dev
            - liblzma-dev
            - libpcre3-dev
            - libedit-dev
            - gcc
            - g++
      env: C_COMPILER=gcc CXX_COMPILER=g++ CFLAGS="-g -O1 --coverage" CXXFLAGS="${CFLAGS}" LDFLAGS="${CFLAGS}" COVERAGE=1

    # With address sanitizer enabled. Use the most recent supported verison
    # of clang, to get the best error detection.
    # TODO: enable initialization order checking.
    - compiler: clang
      addons:
        apt:
          sources:
            - sourceline: "deb http://llvm.org/apt/bionic/ llvm-toolchain-bionic-7 main"
          packages:
            - gfortran
            - automake
            - perl
            - libboost-all-dev
            - zlib1g-dev
            - libbz2-dev
            - liblzma-dev
            - libpcre3-dev
            - libedit-dev
            - libomp-dev
            - clang-7
            - llvm-7-dev
      env: C_COMPILER=clang-7 CXX_COMPILER=clang++-7 LLVM_CONFIG=/usr/bin/llvm-config-7 CPPFLAGS="-DNO_CELLPOOLS" CFLAGS="-g -O2 -fsanitize=address" CXXFLAGS="${CFLAGS}" MAIN_LDFLAGS="${CFLAGS}"

    # # With undefined behaviour sanitizer enabled.  Use the most recent
    # # supported verison of clang, to get the best error detection.
    # - compiler: clang
    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: "deb http://llvm.org/apt/bionic/ llvm-toolchain-bionic-7 main"
    #       packages:
    #         - gfortran
    #         - automake
    #         - perl
    #         - libboost-all-dev
    #         - zlib1g-dev
    #         - libbz2-dev
    #         - liblzma-dev
    #         - libpcre3-dev
    #         - libedit-dev
    #         - libomp-dev
    #         - clang-7
    #         - llvm-7-dev
    #   env: C_COMPILER=clang-7 CXX_COMPILER=clang++-7 LLVM_CONFIG=/usr/bin/llvm-config-7 UBSAN_OPTIONS="print_stacktrace=1 suppressions=`pwd`/.ubsan_suppressions" CFLAGS="-g -O2 -fsanitize=undefined" CXXFLAGS="${CFLAGS}" MAIN_LDFLAGS="${CFLAGS}"

  allow_failures:
    - env: C_COMPILER=clang-7 CXX_COMPILER=clang++-7 LLVM_CONFIG=/usr/bin/llvm-config-7
    
before_install:
  - pip install --user codecov

script:
        - tools/rsync-recommended
        - ${CXX_COMPILER} --version
        - CC=${C_COMPILER} CXX=${CXX_COMPILER} ./configure
          --enable-werror
          --enable-llvm-jit=yes
          --with-llvm=$LLVM_CONFIG || cat config.log
        - travis_wait 60 make -j 2
        # Needed to prevent asan builds running out of memory.
        - sudo sh -c 'echo 1 > /proc/sys/vm/overcommit_memory'
        # TODO: upgrade to check-devel.
        - travis_wait 60 make -j 2 check
        
after_success:
  - if [ -n "$COVERAGE" ]; then bash <(curl -s https://codecov.io/bash) -x gcov-6 -g src/extra -g tests -X coveragepy ; fi
