sudo: required
dist: bionic
language: cpp
env:
  global:
    # By default, rho uses its own implementation of tar written in R.
    # It's really slow, so use system tar instead.
    - TAR=/bin/tar
    - R_BUILD_TAR=/bin/tar
    - R_INSTALL_TAR=/bin/tar
    # Use catchsegv to get useful stacktraces on failures.
    - RHO_DEBUGGER=catchsegv
    
matrix:
  include:
    # gcc 7.4 with code coverage.
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libboost-all-dev
            - zlib1g-dev
            - libbz2-dev
            - liblzma-dev
            - libpcre3-dev
            - libedit-dev
            - gcc-7=7.4.*
            - g++-7=7.4.*
            - gfortran-7=7.4.*
      env: F77=gfortran-7 FCC=gfortran-7 C_COMPILER=gcc-7 CXX_COMPILER=g++-7 CFLAGS="-g -O1 --coverage" CXXFLAGS="${CFLAGS}" LDFLAGS="${CFLAGS}" COVERAGE=1

    # With address sanitizer enabled.  Use the most recent supported verison
    # of clang, to get the best error detection.
    # TODO: enable initialization order checking.
    - compiler: clang
      addons:
        apt:
          sources:
            - sourceline: "deb http://llvm.org/apt/bionic/ llvm-toolchain-bionic-8 main"
          packages:
            - gfortran
            - libboost-all-dev
            - zlib1g-dev
            - libbz2-dev
            - liblzma-dev
            - libpcre3-dev
            - libedit-dev
            - clang-8
            - llvm-8-dev
      env: C_COMPILER=clang-8 CXX_COMPILER=clang++-8 LLVM_CONFIG=/usr/bin/llvm-config-8 CPPFLAGS="-DNO_CELLPOOLS" CFLAGS="-g -O2 -fsanitize=address" CXXFLAGS="${CFLAGS}" MAIN_LDFLAGS="${CFLAGS}"

    # With undefined behaviour sanitizer enabled.  Use the most recent
    # supported verison of clang, to get the best error detection.
    - compiler: clang
      addons:
        apt:
          sources:
            - sourceline: "deb http://llvm.org/apt/bionic/ llvm-toolchain-bionic-8 main"
          packages:
            - gfortran
            - libboost-all-dev
            - zlib1g-dev
            - libbz2-dev
            - liblzma-dev
            - libpcre3-dev
            - libedit-dev
            - clang-8
            - llvm-8-dev
      env: C_COMPILER=clang-8 CXX_COMPILER=clang++-8 LLVM_CONFIG=/usr/bin/llvm-config-8 UBSAN_OPTIONS="print_stacktrace=1 suppressions=`pwd`/.ubsan_suppressions" CFLAGS="-g -O2 -fsanitize=undefined" CXXFLAGS="${CFLAGS}" MAIN_LDFLAGS="${CFLAGS}"

  allow_failures:
    - env: C_COMPILER=clang-8 CXX_COMPILER=clang++-8 LLVM_CONFIG=/usr/bin/llvm-config-8
    
before_install:
  - pip install --user codecov

script:
        - tools/rsync-recommended
        - ${CXX_COMPILER} --version
        - CC=${C_COMPILER} CXX=${CXX_COMPILER} ./configure
          --enable-werror
          --enable-llvm-jit=yes
          --with-llvm=$LLVM_CONFIG || cat config.log
        - travis_wait 60 make -j 2
        # Needed to prevent asan builds running out of memory.
        - sudo sh -c 'echo 1 > /proc/sys/vm/overcommit_memory'
        # TODO: upgrade to check-devel.
        - travis_wait 60 make -j 2 check
        
after_success:
  - if [ -n "$COVERAGE" ]; then bash <(curl -s https://codecov.io/bash) -x gcov-6 -g src/extra -g tests -X coveragepy ; fi
